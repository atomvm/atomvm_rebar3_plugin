searchData={"content_type":"text/plain","items":[{"doc":null,"ref":"atomvm_bootstrap_provider.html","title":"atomvm_bootstrap_provider","type":"module"},{"doc":null,"ref":"atomvm_bootstrap_provider.html#do/1","title":"atomvm_bootstrap_provider.do/1","type":"function"},{"doc":null,"ref":"atomvm_bootstrap_provider.html#format_error/1","title":"atomvm_bootstrap_provider.format_error/1","type":"function"},{"doc":null,"ref":"atomvm_bootstrap_provider.html#init/1","title":"atomvm_bootstrap_provider.init/1","type":"function"},{"doc":null,"ref":"atomvm_esp32_flash_provider.html","title":"atomvm_esp32_flash_provider","type":"module"},{"doc":null,"ref":"atomvm_esp32_flash_provider.html#do/1","title":"atomvm_esp32_flash_provider.do/1","type":"function"},{"doc":null,"ref":"atomvm_esp32_flash_provider.html#format_error/1","title":"atomvm_esp32_flash_provider.format_error/1","type":"function"},{"doc":null,"ref":"atomvm_esp32_flash_provider.html#init/1","title":"atomvm_esp32_flash_provider.init/1","type":"function"},{"doc":null,"ref":"atomvm_packbeam_provider.html","title":"atomvm_packbeam_provider","type":"module"},{"doc":null,"ref":"atomvm_packbeam_provider.html#do/1","title":"atomvm_packbeam_provider.do/1","type":"function"},{"doc":null,"ref":"atomvm_packbeam_provider.html#format_error/1","title":"atomvm_packbeam_provider.format_error/1","type":"function"},{"doc":null,"ref":"atomvm_packbeam_provider.html#init/1","title":"atomvm_packbeam_provider.init/1","type":"function"},{"doc":null,"ref":"atomvm_pico_flash_provider.html","title":"atomvm_pico_flash_provider","type":"module"},{"doc":null,"ref":"atomvm_pico_flash_provider.html#do/1","title":"atomvm_pico_flash_provider.do/1","type":"function"},{"doc":null,"ref":"atomvm_pico_flash_provider.html#format_error/1","title":"atomvm_pico_flash_provider.format_error/1","type":"function"},{"doc":null,"ref":"atomvm_pico_flash_provider.html#init/1","title":"atomvm_pico_flash_provider.init/1","type":"function"},{"doc":null,"ref":"atomvm_rebar3_plugin.html","title":"atomvm_rebar3_plugin","type":"module"},{"doc":null,"ref":"atomvm_rebar3_plugin.html#get_atomvm_rebar_provider_config/2","title":"atomvm_rebar3_plugin.get_atomvm_rebar_provider_config/2","type":"function"},{"doc":null,"ref":"atomvm_rebar3_plugin.html#init/1","title":"atomvm_rebar3_plugin.init/1","type":"function"},{"doc":null,"ref":"atomvm_rebar3_plugin.html#proplist_to_map/1","title":"atomvm_rebar3_plugin.proplist_to_map/1","type":"function"},{"doc":null,"ref":"atomvm_rebar3_plugin.html#t:proplist/0","title":"atomvm_rebar3_plugin.proplist/0","type":"type"},{"doc":null,"ref":"atomvm_stm32_flash_provider.html","title":"atomvm_stm32_flash_provider","type":"module"},{"doc":null,"ref":"atomvm_stm32_flash_provider.html#do/1","title":"atomvm_stm32_flash_provider.do/1","type":"function"},{"doc":null,"ref":"atomvm_stm32_flash_provider.html#format_error/1","title":"atomvm_stm32_flash_provider.format_error/1","type":"function"},{"doc":null,"ref":"atomvm_stm32_flash_provider.html#init/1","title":"atomvm_stm32_flash_provider.init/1","type":"function"},{"doc":null,"ref":"atomvm_uf2create_provider.html","title":"atomvm_uf2create_provider","type":"module"},{"doc":null,"ref":"atomvm_uf2create_provider.html#do/1","title":"atomvm_uf2create_provider.do/1","type":"function"},{"doc":null,"ref":"atomvm_uf2create_provider.html#format_error/1","title":"atomvm_uf2create_provider.format_error/1","type":"function"},{"doc":null,"ref":"atomvm_uf2create_provider.html#init/1","title":"atomvm_uf2create_provider.init/1","type":"function"},{"doc":null,"ref":"atomvm_version_provider.html","title":"atomvm_version_provider","type":"module"},{"doc":null,"ref":"atomvm_version_provider.html#do/1","title":"atomvm_version_provider.do/1","type":"function"},{"doc":null,"ref":"atomvm_version_provider.html#format_error/1","title":"atomvm_version_provider.format_error/1","type":"function"},{"doc":null,"ref":"atomvm_version_provider.html#init/1","title":"atomvm_version_provider.init/1","type":"function"},{"doc":null,"ref":"legacy_esp32_flash_provider.html","title":"legacy_esp32_flash_provider","type":"module"},{"doc":null,"ref":"legacy_esp32_flash_provider.html#do/1","title":"legacy_esp32_flash_provider.do/1","type":"function"},{"doc":null,"ref":"legacy_esp32_flash_provider.html#format_error/1","title":"legacy_esp32_flash_provider.format_error/1","type":"function"},{"doc":null,"ref":"legacy_esp32_flash_provider.html#init/1","title":"legacy_esp32_flash_provider.init/1","type":"function"},{"doc":null,"ref":"legacy_packbeam_provider.html","title":"legacy_packbeam_provider","type":"module"},{"doc":null,"ref":"legacy_packbeam_provider.html#do/1","title":"legacy_packbeam_provider.do/1","type":"function"},{"doc":null,"ref":"legacy_packbeam_provider.html#format_error/1","title":"legacy_packbeam_provider.format_error/1","type":"function"},{"doc":null,"ref":"legacy_packbeam_provider.html#init/1","title":"legacy_packbeam_provider.init/1","type":"function"},{"doc":null,"ref":"legacy_stm32_flash_provider.html","title":"legacy_stm32_flash_provider","type":"module"},{"doc":null,"ref":"legacy_stm32_flash_provider.html#do/1","title":"legacy_stm32_flash_provider.do/1","type":"function"},{"doc":null,"ref":"legacy_stm32_flash_provider.html#format_error/1","title":"legacy_stm32_flash_provider.format_error/1","type":"function"},{"doc":null,"ref":"legacy_stm32_flash_provider.html#init/1","title":"legacy_stm32_flash_provider.init/1","type":"function"},{"doc":"# atomvm_rebar3_plugin\n\nA [`rebar3`](https://rebar3.org) plugin for simplifying development of Erlang applications targeted for the [AtomVM](http://github.com/atomvm/AtomVM) Erlang abstract machine.","ref":"readme.html","title":"atomvm_rebar3_plugin","type":"extras"},{"doc":"Create or edit the `$HOME/.config/rebar3/rebar.config` file to include the `atomvm_rebar3_plugin` [`rebar3`](https://rebar3.org) plugin:\n\n    {plugins, [\n        atomvm_rebar3_plugin\n    ]}.\n\nFrom a working directory, issue the following command:\n\n    shell$ rebar3 new atomvm_app myapp\n    ===> Writing myapp/.gitignore\n    ===> Writing myapp/LICENSE\n    ===> Writing myapp/rebar.config\n    ===> Writing myapp/README.md\n    ===> Writing myapp/src/myapp.erl\n    ===> Writing myapp/src/myapp.app.src\n\nThis task will create a simple [`rebar3`](https://rebar3.org) project with a minimal AtomVM application in the `myapp` directory.\n\nChange to the `myapp` directory and issue the `packbeam` task to the `rebar3` command:\n\n    shell$ cd myapp\n    shell$ rebar3 packbeam\n    ===> Fetching atomvm_rebar3_plugin\n    ===> Fetching packbeam\n    ===> Compiling packbeam\n    ===> Compiling atomvm_rebar3_plugin\n    ===> Verifying dependencies...\n    ===> Compiling myapp\n    ===> AVM file written to .../myapp/_build/default/lib/myapp.avm\n\nAn AtomVM AVM file named `myapp.avm` is created in the `_build/default/lib` directory:\n\n    shell$ ls -l _build/default/lib/myapp.avm\n    -rw-rw-r--  1 joe  wheel  328 Jan 1 1970 00:01 _build/default/lib/myapp.avm\n\nIf you have it installed, you can use the [`packbeam`](https://github.com/atomvm/atomvm_packbeam) tool to list the contents of this generated file:\n\n    shell$ packbeam list _build/default/lib/myapp.avm\n    myapp.beam * [384]\n    myapp/priv/application.bin [220]\n\nSee the various flash tasks described below for information about how to flash the generated AVM file to your device.\n\n## `atomvm_rebar3_plugin` tasks\n\nThe [`rebar3`](https://rebar3.org) plugin provides the following tasks under the `atomvm` namespace:\n\n* `packbeam`  Generate AtomVM packbeam files from your [`rebar3`](https://rebar3.org) project and its dependencies.\n* `esp32_flash`  Flash AtomVM packbeam files to ESP32 devices over a serial connection.\n* `stm32_flash`  Flash AtomVM packbeam files to STM32 devices over a serial connection.\n* `uf2create`   Generate a u2f binary from an AtomVM packbeam file.\n* `pico_flash`  Flash \"packed\" uf2 files to RP2040 (RPi Pico) devices by copying to FATfs.\n* `version`  Print the version of the [`atomvm_rebar3_plugin`](https://atomvm.github.io/atomvm_rebar3_plugin) to the console.\n* `bootstrap`  Compile Erlang files that `rebar3` otherwise cannot compile.  Typically, such files include modules from the OTP `kernel` or `stdlib` application that `rebar3` uses internally for its own implementation.\n\n> IMPORTANT!  Some of the above tasks were previously located  under the default [`rebar3`](https://rebar3.org) namespace; however, the commands under the default namespace have been DEPRECATED.  Users will get a  warning message on the console when using deprecated tasks, and any deprecated tasks may be removed in the future without warning.  Be sure to migrate any scripts or code you have to use the `atomvm` namespace.\n\nThe tasks listed above are described in more detail below.\n\n#","ref":"readme.html#quick-start","title":"Quick Start - atomvm_rebar3_plugin","type":"extras"},{"doc":"The tasks supported by this plugin support the following modes of configuration, ordered from highest to lowest in terms of their precedence:\n\n1. Command-line arguments\n1. `rebar.config` settings\n1. Environment variables\n1. Hard-wired defaults\n\nSpecifically, any options defined on the command line override options by the same name in `rebar.config`, which in turn override any corresponding environment variable settings, and so forth.\n\nConfiguration items for specific tasks are described in detail below for each of the supported tasks.\n\nAny `rebar.config` settings are defined in the project's `rebar.config` project file, and are defined as property lists under the `atomvm_rebar3_plugin` key.  The properties in this list are themselves property lists, using the task name as a key, with task-specific configuration for each entry.\n\nA typical `rebar.config` entry for this plugin therefore takes the form:\n\n    {atomvm_rebar3_plugin, [\n        {packbeam, [...]},\n        {esp32_flash, [...]},\n        ...\n    ]}.\n\nConfiguration in `rebar.config` is optional but can be useful in some cases.  For example, the flash tasks depend on the `packbeam` task, to ensure that the AVM file is up to date before flashing.  However, if the AVM file is rebuilt, the flash task has no way to tell the `packbeam` task any task-specific properties it should use as part of the rebuild.  If they are defined in `rebar.config` (or in environment variables), however, they will be used during an implicit rebuild of the AVM file.\n\n#","ref":"readme.html#configuration","title":"Configuration - atomvm_rebar3_plugin","type":"extras"},{"doc":"The `packbeam` task is used to generated an AtomVM packbeam (`.avm`) file.\n\n    shell$ rebar3 help atovm packbeam\n\n    Use this plugin to create an AtomVM packbeam file from your rebar3 project.\n\n    Usage: rebar3 atomvm packbeam [-e  ] [-f  ] [-p  ]\n                                [-s  ] [-r  ]\n\n    -e, --external      External AVM modules\n    -f, --force         Force rebuild\n    -p, --prune         Prune unreferenced BEAM files\n    -s, --start         Start module\n    -r, --remove_lines  Remove line information from generated AVM files\n                        (off by default)\n    -l, --list          List the contents of AVM files after creation\n\nE.g.,\n\n    shell$ rebar3 atomvm packbeam\n    ===> Compiling packbeam\n    ===> Compiling atomvm_rebar3_plugin\n    ===> Compiling packbeam\n    ===> Verifying dependencies...\n    ===> Compiling myapp\n    ===> AVM file written to .../myapp/_build/default/lib/myapp.avm\n\nWhen using this task, an AVM file with the project name will be created in `_build/ /lib/`, .e.g.,\n\n    shell$ ls -l _build/default/lib/myapp.avm\n    -rw-rw-r--  1 joe  wheel  8780 May 15 1895 22:03 _build/default/lib/myapp.avm\n\nIf your project has any erlang dependencies, the `packbeam` task will include any BEAM files or `priv` files from the dependent projects in the final AVM file.\n\nIf your project (or any of its dependencies) has multiple modules that export a `start/0` entry-point function, you can specify which module to use as the entry-point for your application via the `--start` (or `-s`) option:\n\n    shell$ rebar3 atomvm packbeam --start my_start_module\n    ...\n\nUsing this option will ensure that the generated AVM file with use `my_start_module` to start the application.\n\nYou may use the `--prune` option (or `-p`) to prune unnecessary beam files when creating AVM files.  Pruning unnecessary files can make your AVM files smaller, leading to faster development cycles and more free space on flash media.  Pruning is not enabled by default.  Note that if you use the prune option, your project (or at least one of its dependencies) _must_ have a `start/0` entry-point.  Otherwise, you should treat your project as a library, suitable for inclusion in a different AtomVM project.\n\nBy default, line number information is included in generated AVM files.  Including line number information is useful for debugging and locating the source of application crashes.  However, adding line number information makes AVM files larger and in some cases may have an impact on memory usage. You can remove line number information from your AVM files via the `--remove_lines` (or `-r`) flag, if, for example, you are prepared to deploy your application into production.\n\nThe `packbeam` task will use timestamps to determine whether a rebuild is necessary.  However, timestamps may not be enough to trigger a rebuild, for example, if a dependency was added or removed.  You can force a rebuild of AVM file by adding the `--force` flag (or `-f`), with no arguments.  All AVM files, including AVM files for dependencies, will be rebuilt regardless of timestamps.\n\nIf you would like to view the contents of the AVM file after you have created it, use the `--list` (of `-l`) flag to display the entries of the file on the console.  Entries which export a `start/0` function are marked with an asterisk (`*`).  All entries include their size in bytes, wrapped in square brackets (`[]`).\n\n    shell$ rebar3 atomvm packbeam -l\n    ...\n    ===> AVM file written to .../myapp/_build/default/lib/myapp.avm\n    AVM contents\n    ============\n    myapp.beam * [384]\n    myapp/priv/application.bin [228]\n\nThe following table enumerates the properties that may be defined in your project's `rebar.config`\nfile for this task.  Use `packbeam` as the key for any properties defined for this task.\n\n> Note that the `--list` flag is only operative when the AVM file has been written.  Use the `--force` (`-f`) flag to force a rebuild of the AVM file, if desired.\n\n| Key | Type | Description |\n|-----|------|-------------|\n| `force` | `boolean()` | Always force a rebuild of the AVM file, even if up to date |\n| `prune` | `boolean()` | Prune unecessary BEAM files from generated AVM |\n| `start` | `atom()` | The start module |\n| `remove_lines` | `boolean()` | Remove line number information from generated AVM files.  |\n| `list` | `boolean()` | List the AVM file contents when generating AVM files.  |\n\nExample:\n\n    {atomvm_rebar3_plugin, [{packbeam, [prune, {start, main}]}]}.\n\nAny setting specified on the command line take precedence over settings in `rebar.config`, which in turn take precedence over environment variable settings, which in turn take precedence over the default values specified above.\n\nThe `packbeam` task depends on the `compile` task, so any changes to modules in the project will automatically get rebuilt when running the `packbeam` task.\n\n##","ref":"readme.html#the-packbeam-task","title":"The `packbeam` task - atomvm_rebar3_plugin","type":"extras"},{"doc":"If you already have AVM modules are not available via `rebar3`, you can direct the `packbeam` task to these AVM files via the `--external` (or `-e`) flag, e.g.,\n\n    shell$ rebar3 atomvm packbeam -e   -e   ...\n    ===> Fetching packbeam\n    ===> Compiling packbeam\n    ===> Compiling atomvm_rebar3_plugin\n    ===> Verifying dependencies...\n    ===> Compiling myapp\n    ===> AVM file written to .../myapp/_build/default/lib/myapp.avm\n\n##","ref":"readme.html#external-dependencies","title":"External Dependencies - atomvm_rebar3_plugin","type":"extras"},{"doc":"You can use the `packbeam` task to build AtomVM applications that implements the OTP `application` behavior, and the `atomvm_rebar3_plugin` will create an AVM file that contains boot information to start your application automatically when AtomVM starts.\n\nFor example, a module that implements the OTP `application` behavior might look as follows:\n\n    %% erlang\n    -module(myapp_app).\n\n    -export([start/2, stop/1]).\n\n    start(_Type, Args) ->\n        io:format(\"Starting myapp_app ...~n\"),\n        myapp_sup:start(Args).\n\n    stop(_State) ->\n        myapp_sup:stop_children().\n\n(assume `myapp_sup` is also a part of your OTP application).\n\nAnd the application configuration file (e.g., `myapp.app.src`) should include the application mdoule (`myapp_app`) under it's `mod` entry:\n\n    {\n        application, myapp, [\n            {description, \"My AtomVM application\"},\n            {vsn, \"0.1.0\"},\n            {registered, []},\n            {applications, [\n                kernel,\n                stdlib\n            ]},\n            {env,[]},\n            {mod, {myapp_app, []}},\n            {modules, []},\n            {licenses, [\"Apache-2.0\"]},\n            {links, []}\n        ]\n    }.\n\nIf you specify `init` as the start module, then an AVM file will be created:\n\n    shell$ rebar3 atovm packbeam -p -s init\n    ===> Analyzing applications...\n    ===> Compiling atomvm_rebar3_plugin\n    ===> Compiling packbeam\n    ...\n    ===> Analyzing applications...\n    ===> Compiling myapp\n    ===> AVM file written to .../myapp/_build/default/lib/myapp.avm\n\nThis AVM file will contain the `init.beam` module, along with a boot script (`init/priv/start.boot`), which will be used by the `init.beam` module to start your application automatically.\n\nFor example:\n\n    shell$ packbeam list _build/default/lib/myapp.avm\n    init.beam * [1428]\n    myapp_worker.beam [596]\n    myapp_sup.beam [572]\n    myapp_app.beam [416]\n    myapp/priv/application.bin [288]\n    init/priv/start.boot [56]\n    myapp/priv/example.txt [24]\n\nRunning this AVM file will boot the `myapp` application automatically, without having to write an entrypoint module.\n\n#","ref":"readme.html#building-otp-applications","title":"Building OTP Applications - atomvm_rebar3_plugin","type":"extras"},{"doc":"You may use the `esp32_flash` task to flash the generated AtomVM packbeam application to the flash storage on an ESP32 device connected over a serial connection.\n\n    shell$ rebar3 help atomvm esp32_flash\n\n    Use this plugin to flash an AtomVM packbeam file to an ESP32 device.\n\n    Usage: rebar3 atomvm esp32_flash [-e  ] [-c  ] [-p  ]\n                                    [-b  ] [-o  ]\n\n    -e, --esptool  Path to esptool.py\n    -c, --chip     ESP chip (default auto)\n    -p, --port     Device port (default /dev/ttyUSB0)\n    -b, --baud     Baud rate (default 115200)\n    -o, --offset   Offset (default 0x210000)\n\nThe `esp32_flash` task will use the `esptool.py` command to flash the ESP32 device.  This tool is available via the  IDF SDK , or directly via  github .  The `esptool.py` command is also available via many package managers (e.g., MacOS Homebrew).\n\nBy default, the `esp32_flash` task will assume the `esptool.py` command is available on the user's executable path.  Alternatively, you may specify the full path to the `esptool.py` command via the `-e` (or `--esptool`) option\n\nBy default, the `esp32_flash` task will write to port `/dev/ttyUSB0` at a baud rate of `115200`.  You may control the port and baud settings for connecting to your ESP device via the `-port` and `-baud` options to the `esp32_flash` task, e.g.,\n\n    shell$ rebar3 atomvm esp32_flash --port /dev/tty.SLAB_USBtoUART --baud 921600\n    ...\n    ===> esptool.py --chip esp32 --port /dev/tty.SLAB_USBtoUART --baud 921600 --before default_reset --after hard_reset write_flash -u --flash_mode dio --flash_freq 40m --flash_size detect 0x110000 /home/joe/myapp/_build/default/lib/myapp.avm\n    esptool.py v2.1\n    Connecting........_\n    Chip is ESP32D0WDQ6 (revision 1)\n    Uploading stub...\n    Running stub...\n    Stub running...\n    Changing baud rate to 921600\n    Changed.\n    Configuring flash size...\n    Auto-detected Flash size: 4MB\n    Wrote 16384 bytes at 0x00110000 in 0.2 seconds (615.0 kbit/s)...\n    Hash of data verified.\n\n    Leaving...\n    Hard resetting...\n\nThe following table enumerates the properties that may be defined in your project's `rebar.config` file for this task.  Use `esp32_flash` as the key for any properties defined for this task.\n\n| Key | Type | Description |\n|-----|------|-------------|\n| `esptool` | `string()` | Path to the `esptool.py` tool, if not already in user's `PATH` |\n| `chip` | `string()` | ESP32 chipt type |\n| `port` | `string()` | Device port on which the ESP32 can be located |\n| `baud` | `integer()` | Device BAUD rate |\n| `offset` | `string()` | Offset into which to write AtomVM application |\n\nExample:\n\n    {atomvm_rebar3_plugin, [{esp32_flash, [{baud, 921600}]}]}.\n\nAlternatively, the following environment variables may be used to control the above settings:\n\n* `ATOMVM_REBAR3_PLUGIN_ESP32_FLASH_ESPTOOL`\n* `ATOMVM_REBAR3_PLUGIN_ESP32_FLASH_CHIP`\n* `ATOMVM_REBAR3_PLUGIN_ESP32_FLASH_PORT`\n* `ATOMVM_REBAR3_PLUGIN_ESP32_FLASH_BAUD`\n* `ATOMVM_REBAR3_PLUGIN_ESP32_FLASH_OFFSET`\n\nAny setting specified on the command line take precedence over settings in `rebar.config`, which in turn take precedence over environment variable settings, which in turn take precedence over the default values specified above.\n\nThe `esp32_flash` task depends on the `packbeam` task, so the packbeam file will get automatically built if any changes have been made to its dependencies.\n\n#","ref":"readme.html#the-esp32-flash-task","title":"The `esp32-flash` task - atomvm_rebar3_plugin","type":"extras"},{"doc":"You may use the `stm32_flash` task to flash the generated AtomVM packbeam application to the flash storage on an STM32 device connected to an st-link.\n\n##","ref":"readme.html#the-stm32_flash-task","title":"The `stm32_flash` task - atomvm_rebar3_plugin","type":"extras"},{"doc":"The stm32 builds of AtomVM do not include a library partition and the [AtomVM](https://github.com/atomvm/AtomVM) `atomvmlib.avm` core library is not flashed to the device. Instead the application should be compiled and packed along with `atomvmlib.avm` before flashing, for example:\n\n    shell$ rebar3 atomvm packbeam -p -e /path/to/atomvmlib.avm\n\nYou can acquire the latest [AtomVM](https://github.com/atomvm/AtomVM) `atomvmlib.avm` core library from the [Release](https://github.com/atomvm/AtomVM/releases) section of the [AtomVM](https://github.com/atomvm/AtomVM) Github repository.  Note that the version of the `atomvmlib.avm` core library *must* match the version of the [AtomVM](https://github.com/atomvm/AtomVM) virtual machine image you have flashed to the device.\n\n##","ref":"readme.html#preparing-an-application-for-flashing","title":"Preparing an application for flashing - atomvm_rebar3_plugin","type":"extras"},{"doc":"You may use the `stm32_flash` task to flash the generated AtomVM packbeam application to the flash storage on an STM32 device connected to an st-link.\n\n    shell$ rebar3 help atomvm stm32_flash\n\n    Use this plugin to flash an AtomVM packbeam file to an STM32 device.\n\n    Usage: rebar3 atomvm stm32_flash [-s  ] [-o  ]\n\n    -s, --stflash  Path to st-flash\n    -o, --offset   Offset (default 0x8080000)\n\nThe `stm32_flash` will use the `st-flash` tool from the open source (bsd-3 liscensed) [stlink](https://github.com/stlink-org/stlink) suite of stm32 utilites to flash the STM32 device. This tool is available on [github](https://github.com/stlink-org/stlink), and in many package managers.\n\nBy default, the `stm32_flash` task will assume the `st-flash` command is available on the user's executable path.  Alternatively, you may specify the full path to the `st-flash` command via the `-s` (or `--stflash`) option\n\n    shell$ rebar3 atomvm stm32_flash --stflash /usr/bin/st-flash --offset 0x8080000\n    ===> Verifying dependencies...\n    ===> Analyzing applications...\n    ===> Compiling stm32_hello\n    ===> st-flash --reset write /home/atomvm/AtomVM/stm32_hello/_build/default/lib/stm32_hello.avm 0x8080000\n\n    st-flash 1.7.0\n    2023-07-09T21:42:26 INFO common.c: F42x/F43x: 256 KiB SRAM, 2048 KiB flash in at least 16 KiB pages.\n    file /home/atomvm/AtomVM/stm32_hello/_build/default/lib/stm32_hello.avm md5 checksum: 5747b8eab41a3696097eb386c785e, stlink checksum: 0x00154e50\n    2023-07-09T21:42:26 INFO common.c: Attempting to write 29304 (0x7278) bytes to stm32 address: 134742016 (0x8080000)\n    EraseFlash - Sector:0x8 Size:0x20000 2023-07-09T21:42:28 INFO common.c: Flash page at addr: 0x08080000 erased\n    2023-07-09T21:42:28 INFO common.c: Finished erasing 1 pages of 131072 (0x20000) bytes\n    2023-07-09T21:42:28 INFO common.c: Starting Flash write for F2/F4/F7/L4\n    2023-07-09T21:42:28 INFO flash_loader.c: Successfully loaded flash loader in sram\n    2023-07-09T21:42:28 INFO flash_loader.c: Clear DFSR\n    2023-07-09T21:42:28 INFO common.c: enabling 32-bit flash writes\n    2023-07-09T21:42:29 INFO common.c: Starting verification of write complete\n    2023-07-09T21:42:29 INFO common.c: Flash written and verified! jolly good!\n\nThe following table enumerates the properties that may be defined in your project's `rebar.config` file for this task.  Use `stm32_flash` as the key for any properties defined for this task.\n\n| Key | Type | Description |\n|-----|------|-------------|\n| `stflash` | `string()` | Path to the `st-flash` tool, if not already in user's `PATH` |\n| `offset` | `string()` | Offset into which to write AtomVM application |\n\nExample:\n\n    {atomvm_rebar3_plugin, [{stm32_flash, [{offset, \"0x230000\"}]}]}.\n\nAlternatively, the following environment variables may be used to control the above settings:\n\n* `ATOMVM_REBAR3_PLUGIN_STM32_STFLASH`\n* `ATOMVM_REBAR3_PLUGIN_STM32_FLASH_OFFSET`\n\nAny setting specified on the command line take precedence over entries in `rebar.config`, which in turn take precedence over environment variable settings, which in turn take precedence over the default values specified above.\n\nThe `stm32_flash` task depends on the `packbeam` task, so the packbeam file will get automatically built if any changes have been made to its dependencies.\n\n#","ref":"readme.html#flashing-an-application-to-a-stm32-device","title":"Flashing an application to a stm32 device - atomvm_rebar3_plugin","type":"extras"},{"doc":"##","ref":"readme.html#the-pico_flash-task","title":"The `pico_flash` task - atomvm_rebar3_plugin","type":"extras"},{"doc":"You may use the `pico_flash` task to copy the generated AtomVM packbeam application in uf2 format to the flash storage on an Pico device connected to usb. It is not necessary to push the `BOOTSEL` button while plugging in the Pico to usb, instead provide the path of the device to reset. On Linux this is typically `/dev/ttyACM0` (the same device used to monitor serial), on MacOS it is a cu.usbmodem device matching `/dev/cu.usbmodem14*` (not the /dev/tty.usbmodem14___ device used for serial monitoring).\n\n    shell$ rebar3 help atomvm pico_flash\n\n    Use this plugin to convert an AtomVM packbeam file to a rp2040 a uf2 file and copy to an rp2040 devices.\n\n    Usage: rebar3 atomvm pico_flash [-p  ] [-r  ]\n\n    -p, --path   Path to pico device (Defaults Linux:\n                /run/media/${USER}/RPI-RP2, MacOS: /Volumes/RPI-RP2)\n    -r, --reset  Path to serial device to reset before flashing (Defaults\n                Linux: /dev/ttyACM0, MacOS: /dev/cu.usbmodem14*)\n\nThe `pico_flash` task depends on the `uf2create` task which in turn depends on `packbeam`, so in most cases it is not necessary to execute either of those tasks if the default settings are used, as any changes to modules in the project will get rebuilt before being flashed to the device.\n\n    shell$ rebar3 atomvm pico_flash\n    ===> Fetching atomvm_rebar3_plugin v0.7.3\n    ===> Fetching rebar3_hex v7.0.6\n    ===> Fetching hex_core v0.8.4\n    ===> Fetching verl v1.1.1\n    ===> Analyzing applications...\n    ===> Compiling hex_core\n    ===> Compiling verl\n    ===> Compiling rebar3_hex\n    ===> Fetching atomvm_packbeam v0.6.0\n    ===> Fetching rebar3_proper v0.12.1\n    ===> Analyzing applications...\n    ===> Compiling rebar3_proper\n    ===> Analyzing applications...\n    ===> Compiling packbeam\n    ===> Compiling atomvm_rebar3_plugin\n    ===> Verifying dependencies...\n    ===> Analyzing applications...\n    ===> Compiling hello_world\n    ===> AVM file written to /home/joe/projects/hello_world/_build/default/lib/hello_world/hello_world.avm\n    ===> Resetting device at path /dev/ttyACM0\n    ===> Waiting for the device at path /run/media/${USER}/RPI-RP2 to settle and mount...\n    ===> Copying /home/joe/projects/hello/_build/default/lib/hello.uf2 to /run/media/${USER}/RPI-RP2...\n\n    '/home/joe/projects/hello_world/_build/default/lib/hello_world.uf2' -> '/run/media/joe/RPI-RP2/hello_world.uf2'\n\nIf your pico uses a different device path or mount directory supply the full path needed for your device:\n\n    shell$ rebar3 atomvm pico_flash --path /mnt/pico --reset /dev/cu.usbmodem1411202\n\n> Warning: There is currently a known bug that occurs when the VM is compiled with the `-DAVM_WAIT_FOR_USB_CONNECT` cmake option. If you have previously connected to the tty serial port with `screen`, `minicom`, or similar and have disconnected or closed the session, the device will take unusually long to reset and fail to mount the FAT partition within 30 seconds and `pico_flash` will fail. This can be worked around by unplugging the pico from usb and plug it back in again, before repeating the flash procedure.\n\nThe following table enumerates the properties that may be defined in your project's `rebar.config` file for this task.  Use `pico_flash` as the key for any properties defined for this task.\n\n| Key | Type | Description |\n|-----|------|-------------|\n| `path` | `string()` | Path to pico device |\n| `reset` | `string()` | Path to serial device to reset before flashing |\n\nExample:\n\n    {atomvm_rebar3_plugin, [{pico_flash, [{reset, \"/dev/cu.usbmodem1411202\"}]}]}.\n\nAlternatively, the following environment variables may be used to control the above settings:\n\n* `ATOMVM_REBAR3_PLUGIN_PICO_MOUNT_PATH`\n* `ATOMVM_REBAR3_PLUGIN_PICO_RESET_DEV`\n\nAny setting specified on the command line take precedence over entries in `rebar.config`, which in turn take precedence over environment variable settings, which in turn take precedence over the default values specified above.\n\nThe `pico_flash` task depends on the `uf2create` task (which in turn depends on the `packbeam`  task), so the so the application will be packed and re-formatted if any changes have been made to dependencies.\n\n#","ref":"readme.html#flashing-an-application-to-a-pico-rp2040-device","title":"Flashing an application to a pico (rp2040) device - atomvm_rebar3_plugin","type":"extras"},{"doc":"The `uf2create` task is used to generated an uf2 binary suitable for running on a Pico (RP2040) device from an AtomVM packbeam (`.avm`) file.\n\n    shell$ rebar3 help atomvm uf2create\n\n    Use this plugin to create Raspberry Pico uf2 files from an AtomVM packbeam file.\n\n    Usage: rebar3 atomvm uf2create [-o  ] [-s  ] [-i  ]\n\n    -o, --output  Output path/name\n    -s, --start   Start address for the uf2 binary (default 0x10180000)\n    -i, --input   Input avm file to convert to uf2\n\nIt should not be necessary to use this tool before using `pico_flash`, unless you have built a custom VM that requires changing the start address of the uf2 binary. If the application has not been compiled, or packed with packbeam, these steps will be run first using the default settings for `packbeam`.\n\nThe following table enumerates the properties that may be defined in your project's `rebar.config` file for this task.  Use `uf2create` as the key for any properties defined for this task.\n\n| Key | Type | Description |\n|-----|------|-------------|\n| `start` | `string()` | Start address for the uf2 binary |\n\nExample:\n\n    {atomvm_rebar3_plugin, [{uf2create, [{start, \"0x10180000\"}]}]}.\n\nAlternatively, the following environment variables may be used to control the above settings:\n\n* `ATOMVM_REBAR3_PLUGIN_UF2CREATE_START`\n\nAny setting specified on the command line take precedence over entries in `rebar.config`, which in turn take precedence over environment variable settings, which in turn take precedence over the default values specified above.\n\nThe `uf2create` task depends on the `packbeam` task, so the packbeam file will get automatically built if any changes have been made to its dependencies.\n\n#","ref":"readme.html#the-uf2create-task","title":"The `uf2create` task - atomvm_rebar3_plugin","type":"extras"},{"doc":"use the `version` task to print the current verison of the [`atomvm_rebar3_plugin`](https://atomvm.github.io/atomvm_rebar3_plugin) to the console.\n\n    shell$ rebar3 atomvm version\n    0.7.3\n\n#","ref":"readme.html#the-version-task","title":"The `version` task - atomvm_rebar3_plugin","type":"extras"},{"doc":"Use the `bootstrap` task to compile Erlang files that `rebar3` is otherwise unable to compile.  Typically, such files include modules from the OTP `kernel` or `stdlib` application that `rebar3` uses internally for its own implementation.\n\n> Note.  The default `rebar3` `compile` task has the unfortunate feature (bug?) that it will load files that it compiles, which can be problematic if you are compiling modules that share names with modules that `rebar3` is using as part of its own implementation.\n\n    shell$ rebar3 help atomvm bootstrap\n\n    This plugin is used internally by the atomvm packbeam task to compile\n    modules that cannot be compiled directly by rebar.\n\n    Users typically have no reason to use this task directly.\n\n    Usage: rebar3 atomvm tstrap [-b  ] [-f  ]\n\n    -b, --bootstrap_dir  Bootstrap directory\n    -f, --force         Force rebuild\n\nTo use this task, place files that you would like to have compiled by the task in the `bootstrap` directory of your rebar3 project (or in a directory of your choosing -- see below).\n\n    shell$ ls bootstrap\n    application.erl\n\nFiles in this directory will be compiled and included in any generated PackBEAM files.\n\n> Note.  The `bootstrap` task is used internally by the [`atomvm_rebar3_plugin`](https://atomvm.github.io/atomvm_rebar3_plugin) when the `packbeam` task is run.  Users typically do not have a need to run this task manually.\n\nThe following table enumerates the properties that may be defined in your project's `rebar.config` file for this task.  Use `bootstrap` as the key for any properties defined for this task.\n\n| Key | Type | Description |\n|-----|------|-------------|\n| `force` | `boolean()` | Always force recompilation of bootstrap files, even if up to date |\n| `bootstrap_dir` | `string() \\| undefined` | (Optional) path to a directory containing bootstrap files.  By default, the `bootstrap` task will use the `bootstrap` directory in the top-level project directory.  The path may be relative (to where the command is run) or absolute. |\n\nExample:\n\n    {atomvm_rebar3_plugin, [\n        {bootstrap, [\n            {bootstrap_dir, \"/path/to/bootstrap_dir\"}, force\n        ]}\n    ]}.\n\nAny setting specified on the command line take precedence over entries in `rebar.config`, which in turn take precedence over the default values specified above.","ref":"readme.html#the-bootstrap-task","title":"The `bootstrap` task - atomvm_rebar3_plugin","type":"extras"},{"doc":"The `atomvm_rebar3_plugin` contains template definitions for generating skeletal `rebar3` projects.\n\nThe best way to make use of this template is to include the `atomvm_rebar3_plugin` in your `$HOME/.config/rebar3/rebar.config` file, e.g.,\n\n    {plugins, [\n        atomvm_rebar3_plugin\n    ]}.\n\nYou can then generate a minimal AtomVM application as follows:\n\n    shell$ rebar3 new atomvm_app myapp\n    ===> Writing myapp/.gitignore\n    ===> Writing myapp/LICENSE\n    ===> Writing myapp/rebar.config\n    ===> Writing myapp/README.md\n    ===> Writing myapp/src/myapp.erl\n    ===> Writing myapp/src/myapp.app.src\n\nThis task will create a simple `rebar3` project with a minimal AtomVM application in the `myapp` directory.\n\nChange to the `myapp` directory and issue the `packbeam` task to the `rebar3` command:\n\n    shell$ cd myapp\n    shell$ rebar3 packbeam\n    ===> Fetching atomvm_rebar3_plugin\n    ===> Fetching packbeam\n    ===> Compiling packbeam\n    ===> Compiling atomvm_rebar3_plugin\n    ===> Verifying dependencies...\n    ===> Compiling myapp\n    ===> AVM file written to .../myapp/_build/default/lib/myapp.avm\n\nAn AtomVM AVM file is created in the `_build/default/lib` directory:\n\n    shell$ ls -l _build/default/lib/myapp.avm\n    -rw-rw-r--  1 joe  wheel  328 Jan 1 1970 00:01 _build/default/lib/myapp.avm","ref":"readme.html#atomvm-app-template","title":"AtomVM App Template - atomvm_rebar3_plugin","type":"extras"},{"doc":"# Changelog\n\nAll notable changes to this project will be documented in this file.\n\nThe format is based on [Keep a Changelog](https://keepachangelog.com/en/1.0.0/),\nand this project adheres to [Semantic Versioning](https://semver.org/spec/v2.0.0.html).\n\n## [0.7.3] (2023.11.25)\n\n- Added support for compiling \"bootstrap\" erlang files that `rebar3` otherwise cannot compile.\n- Added profiles to minimize downstream dependencies\n- Misc license cleanup\n\n## [0.7.2] (2023.10.24)\n\n- Updated to depend on `atomvm_packbeam` version `0.7.1`, to make use of `packbeam_api` changes.\n- Added tests for `packbeam`, `esp32`, and `stm32` tasks.\n- Generate `ex_doc` documentation instead of `edoc`.\n- Added `version` task to print the version of the plugin to the console\n\n## [0.7.1] (2023.10.18)\n\n- Fixed a bug whereby a missing `atomvm_rebar3_plugin` entry in `rebar.config` would crash the `packbeam` task.\n\n## [0.7.0] (2023.10.18)\n\n- Moved atomvm tasks under the `atomvm` namespace (with support for deprecated tasks in the default namespace)\n- Added `utf2create` and `pico_flash` tasks, for Raspberry Pico support\n- Added support for setting options in `rebar.config`\n- Added `--list` (`-l`) option to `packbeam` to to display contents of generated AVM files.\n\n## [0.6.1] (2023.07.16)\n\n#","ref":"changelog.html","title":"Changelog","type":"extras"},{"doc":"- Added `stm32_flash` rebar3 task\n- Added `-r|--remove_lines` command line option to `packbeam` task\n\n#","ref":"changelog.html#added","title":"Added - Changelog","type":"extras"},{"doc":"- Updated dependency on `atomvm_packbeam` 0.6 or later\n- Changed default to not remove lines from generated AVM files\n\n## [0.6.0] (2022.12.18)\n\n#","ref":"changelog.html#changed","title":"Changed - Changelog","type":"extras"},{"doc":"- Added ability to include ` >` chunks in BEAM files in generated AVM files\n\n#","ref":"changelog.html#added","title":"Added - Changelog","type":"extras"},{"doc":"- Updated dependency on `atomvm_packbeam` 0.6.0\n\n## [0.5.1] (2022.08.31)\n\n#","ref":"changelog.html#changed","title":"Changed - Changelog","type":"extras"},{"doc":"- Fixed Hex dependency on atomvm_packbeam 0.5.0\n\n## [0.5.0] (2022.08.28)\n\n#","ref":"changelog.html#fixed","title":"Fixed - Changelog","type":"extras"},{"doc":"- Added packing of application bin file to packbeam file.\n\n## [0.4.1] (2022.06.19)\n\n#","ref":"changelog.html#added","title":"Added - Changelog","type":"extras"},{"doc":"- Updated dependency on `atomvm_packbeam` 0.4.1\n\n## [0.4.0] (2022.05.21)\n\n#","ref":"changelog.html#changed","title":"Changed - Changelog","type":"extras"},{"doc":"- Added `erlfmt` plugin and formatted code.\n- Added `--chip` option to `esp32_flash` task\n\n#","ref":"changelog.html#added","title":"Added - Changelog","type":"extras"},{"doc":"- Fixed a bug that prevented files in directories inside of the `priv` directory to be included in packbeam files.\n\n## [0.3.0] (2022.05.18)\n\n#","ref":"changelog.html#fixed","title":"Fixed - Changelog","type":"extras"},{"doc":"- Updated dependency on `atomvm_packbeam` `0.3.0`\n\n## [0.2.0] (?)\n\n#","ref":"changelog.html#changed","title":"Changed - Changelog","type":"extras"},{"doc":"- Added plugin template for generating applications\n- Added support for deployment to hex\n- Added support for `--start` flag\n\n#","ref":"changelog.html#added","title":"Added - Changelog","type":"extras"},{"doc":"- Updated default flash location\n\n## [0.1.0] (2020.05.17)\n- Initial Release","ref":"changelog.html#changed","title":"Changed - Changelog","type":"extras"},{"doc":"SPDX-License-Identifier: Apache-2.0 OR LGPL-2.1-or-later\n-->\n\n# `atomvm_rebar3_plugin` Update Instructions","ref":"updating.html","title":"atomvm_rebar3_plugin Update Instructions","type":"extras"},{"doc":"- The `atomvm_rebar3_plugin` tasks have been moved into the `atomvm` namespace (from the [`rebar3`](https://rebar3.org) `default` namespace).  The \"legacy\" tasks in the `default` namespace are deprecated, and users will be issued a warning when used.  Be sure to use the `atomvm` namespace in any future usage of this plugin, as the deprecated tasks may be removed without warning.  E.g., `rebar3 atomvm packbeam ...`\n\n- The default behavior of not generating line number information in BEAM files has changed.  By default, line number information will be generated in BEAM files.  You can remove line number information using from BEAM files by using the `-r` (or `--remove_lines`) flags to the `packbeam` task.  Note that in versions 0.6 of this tool, the `--include_lines` flag was ignored due to a bug in the code.","ref":"updating.html#0-6-0-7","title":"0.6.* -> 0.7.* - atomvm_rebar3_plugin Update Instructions","type":"extras"},{"doc":"Apache License\n                           Version 2.0, January 2004\n                        http://www.apache.org/licenses/\n\n   TERMS AND CONDITIONS FOR USE, REPRODUCTION, AND DISTRIBUTION\n\n   1. Definitions.\n\n      \"License\" shall mean the terms and conditions for use, reproduction,\n      and distribution as defined by Sections 1 through 9 of this document.\n\n      \"Licensor\" shall mean the copyright owner or entity authorized by\n      the copyright owner that is granting the License.\n\n      \"Legal Entity\" shall mean the union of the acting entity and all\n      other entities that control, are controlled by, or are under common\n      control with that entity. For the purposes of this definition,\n      \"control\" means (i) the power, direct or indirect, to cause the\n      direction or management of such entity, whether by contract or\n      otherwise, or (ii) ownership of fifty percent (50%) or more of the\n      outstanding shares, or (iii) beneficial ownership of such entity.\n\n      \"You\" (or \"Your\") shall mean an individual or Legal Entity\n      exercising permissions granted by this License.\n\n      \"Source\" form shall mean the preferred form for making modifications,\n      including but not limited to software source code, documentation\n      source, and configuration files.\n\n      \"Object\" form shall mean any form resulting from mechanical\n      transformation or translation of a Source form, including but\n      not limited to compiled object code, generated documentation,\n      and conversions to other media types.\n\n      \"Work\" shall mean the work of authorship, whether in Source or\n      Object form, made available under the License, as indicated by a\n      copyright notice that is included in or attached to the work\n      (an example is provided in the Appendix below).\n\n      \"Derivative Works\" shall mean any work, whether in Source or Object\n      form, that is based on (or derived from) the Work and for which the\n      editorial revisions, annotations, elaborations, or other modifications\n      represent, as a whole, an original work of authorship. For the purposes\n      of this License, Derivative Works shall not include works that remain\n      separable from, or merely link (or bind by name) to the interfaces of,\n      the Work and Derivative Works thereof.\n\n      \"Contribution\" shall mean any work of authorship, including\n      the original version of the Work and any modifications or additions\n      to that Work or Derivative Works thereof, that is intentionally\n      submitted to Licensor for inclusion in the Work by the copyright owner\n      or by an individual or Legal Entity authorized to submit on behalf of\n      the copyright owner. For the purposes of this definition, \"submitted\"\n      means any form of electronic, verbal, or written communication sent\n      to the Licensor or its representatives, including but not limited to\n      communication on electronic mailing lists, source code control systems,\n      and issue tracking systems that are managed by, or on behalf of, the\n      Licensor for the purpose of discussing and improving the Work, but\n      excluding communication that is conspicuously marked or otherwise\n      designated in writing by the copyright owner as \"Not a Contribution.\"\n\n      \"Contributor\" shall mean Licensor and any individual or Legal Entity\n      on behalf of whom a Contribution has been received by Licensor and\n      subsequently incorporated within the Work.\n\n   2. Grant of Copyright License. Subject to the terms and conditions of\n      this License, each Contributor hereby grants to You a perpetual,\n      worldwide, non-exclusive, no-charge, royalty-free, irrevocable\n      copyright license to reproduce, prepare Derivative Works of,\n      publicly display, publicly perform, sublicense, and distribute the\n      Work and such Derivative Works in Source or Object form.\n\n   3. Grant of Patent License. Subject to the terms and conditions of\n      this License, each Contributor hereby grants to You a perpetual,\n      worldwide, non-exclusive, no-charge, royalty-free, irrevocable\n      (except as stated in this section) patent license to make, have made,\n      use, offer to sell, sell, import, and otherwise transfer the Work,\n      where such license applies only to those patent claims licensable\n      by such Contributor that are necessarily infringed by their\n      Contribution(s) alone or by combination of their Contribution(s)\n      with the Work to which such Contribution(s) was submitted. If You\n      institute patent litigation against any entity (including a\n      cross-claim or counterclaim in a lawsuit) alleging that the Work\n      or a Contribution incorporated within the Work constitutes direct\n      or contributory patent infringement, then any patent licenses\n      granted to You under this License for that Work shall terminate\n      as of the date such litigation is filed.\n\n   4. Redistribution. You may reproduce and distribute copies of the\n      Work or Derivative Works thereof in any medium, with or without\n      modifications, and in Source or Object form, provided that You\n      meet the following conditions:\n\n      (a) You must give any other recipients of the Work or\n          Derivative Works a copy of this License; and\n\n      (b) You must cause any modified files to carry prominent notices\n          stating that You changed the files; and\n\n      (c) You must retain, in the Source form of any Derivative Works\n          that You distribute, all copyright, patent, trademark, and\n          attribution notices from the Source form of the Work,\n          excluding those notices that do not pertain to any part of\n          the Derivative Works; and\n\n      (d) If the Work includes a \"NOTICE\" text file as part of its\n          distribution, then any Derivative Works that You distribute must\n          include a readable copy of the attribution notices contained\n          within such NOTICE file, excluding those notices that do not\n          pertain to any part of the Derivative Works, in at least one\n          of the following places: within a NOTICE text file distributed\n          as part of the Derivative Works; within the Source form or\n          documentation, if provided along with the Derivative Works; or,\n          within a display generated by the Derivative Works, if and\n          wherever such third-party notices normally appear. The contents\n          of the NOTICE file are for informational purposes only and\n          do not modify the License. You may add Your own attribution\n          notices within Derivative Works that You distribute, alongside\n          or as an addendum to the NOTICE text from the Work, provided\n          that such additional attribution notices cannot be construed\n          as modifying the License.\n\n      You may add Your own copyright statement to Your modifications and\n      may provide additional or different license terms and conditions\n      for use, reproduction, or distribution of Your modifications, or\n      for any such Derivative Works as a whole, provided Your use,\n      reproduction, and distribution of the Work otherwise complies with\n      the conditions stated in this License.\n\n   5. Submission of Contributions. Unless You explicitly state otherwise,\n      any Contribution intentionally submitted for inclusion in the Work\n      by You to the Licensor shall be under the terms and conditions of\n      this License, without any additional terms or conditions.\n      Notwithstanding the above, nothing herein shall supersede or modify\n      the terms of any separate license agreement you may have executed\n      with Licensor regarding such Contributions.\n\n   6. Trademarks. This License does not grant permission to use the trade\n      names, trademarks, service marks, or product names of the Licensor,\n      except as required for reasonable and customary use in describing the\n      origin of the Work and reproducing the content of the NOTICE file.\n\n   7. Disclaimer of Warranty. Unless required by applicable law or\n      agreed to in writing, Licensor provides the Work (and each\n      Contributor provides its Contributions) on an \"AS IS\" BASIS,\n      WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or\n      implied, including, without limitation, any warranties or conditions\n      of TITLE, NON-INFRINGEMENT, MERCHANTABILITY, or FITNESS FOR A\n      PARTICULAR PURPOSE. You are solely responsible for determining the\n      appropriateness of using or redistributing the Work and assume any\n      risks associated with Your exercise of permissions under this License.\n\n   8. Limitation of Liability. In no event and under no legal theory,\n      whether in tort (including negligence), contract, or otherwise,\n      unless required by applicable law (such as deliberate and grossly\n      negligent acts) or agreed to in writing, shall any Contributor be\n      liable to You for damages, including any direct, indirect, special,\n      incidental, or consequential damages of any character arising as a\n      result of this License or out of the use or inability to use the\n      Work (including but not limited to damages for loss of goodwill,\n      work stoppage, computer failure or malfunction, or any and all\n      other commercial damages or losses), even if such Contributor\n      has been advised of the possibility of such damages.\n\n   9. Accepting Warranty or Additional Liability. While redistributing\n      the Work or Derivative Works thereof, You may choose to offer,\n      and charge a fee for, acceptance of support, warranty, indemnity,\n      or other liability obligations and/or rights consistent with this\n      License. However, in accepting such obligations, You may act only\n      on Your own behalf and on Your sole responsibility, not on behalf\n      of any other Contributor, and only if You agree to indemnify,\n      defend, and hold each Contributor harmless for any liability\n      incurred by, or claims asserted against, such Contributor by reason\n      of your accepting any such warranty or additional liability.\n\n   END OF TERMS AND CONDITIONS\n\n   Copyright 2020, Fred Dushin  .\n\n   Licensed under the Apache License, Version 2.0 (the \"License\");\n   you may not use this file except in compliance with the License.\n   You may obtain a copy of the License at\n\n       http://www.apache.org/licenses/LICENSE-2.0\n\n   Unless required by applicable law or agreed to in writing, software\n   distributed under the License is distributed on an \"AS IS\" BASIS,\n   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   See the License for the specific language governing permissions and\n   limitations under the License.","ref":"license.html","title":"LICENSE","type":"extras"},{"doc":"SPDX-License-Identifier: Apache-2.0 OR LGPL-2.1-or-later\n-->\n\n# Contributing\n\nBefore contributing, please read carefully our [Code of Conduct](CODE_OF_CONDUCT.md) and\nthe following contribution guidelines.\n\nPlease, also make sure to understand the [Apache-2.0 license](LICENSE.md) and the\n[Developer Certificate of Origin](https://developercertificate.org/).\n\nLast but not least, **do not use GitHub issues for vulnerability reports**, read instead the\n[security policy](SECURITY.md) for instructions.","ref":"contributing.html","title":"Contributing","type":"extras"},{"doc":"* Commit messages should have a\n* [summary and a description](https://github.com/erlang/otp/wiki/writing-good-commit-messages)\n* Avoid trailing white spaces\n* Always `git pull --rebase`\n* [Clean up your branch history](https://git-scm.com/book/id/v2/Git-Tools-Rewriting-History) with\n`git rebase -i`\n* All your intermediate commits should build","ref":"contributing.html#git-recommended-practises","title":"Git Recommended Practises - Contributing","type":"extras"},{"doc":"#","ref":"contributing.html#coding-style","title":"Coding Style - Contributing","type":"extras"},{"doc":"##","ref":"contributing.html#c-code","title":"C Code - Contributing","type":"extras"},{"doc":"* [K&R identation and braces style](https://en.wikipedia.org/wiki/Indentation_style#K&R_style)\n* [Mandatory braces](https://en.wikipedia.org/wiki/Indentation_style#Variant:_mandatory_braces)\n* 4 spaces identation\n\nGood:\n```\nvoid f(int reverse)\n{\n    if (reverse) {\n        puts(\"!dlroW olleH\");\n    } else {\n        puts(\"Hello world\");\n    }\n}\n```\n\nBad:\n```\nvoid f(int reverse) {\n    if (reverse)\n        puts (\"!dlroW olleH\");\n    else\n        puts (\"Hello world\");\n}\n```\n\n##","ref":"contributing.html#identation","title":"Identation - Contributing","type":"extras"},{"doc":"* Struct names are PascalCase (e.g. Context)\n* Scalar types are lower case (e.g. term)\n* All other names (e.g. functions and variables) are snake_case (e.g. term_is_integer)\n* Always prefix function names (e.g. term_is_nil, term_is_integer, context_new, context_destroy)\n\n##","ref":"contributing.html#names","title":"Names - Contributing","type":"extras"},{"doc":"* Pointer * should be with the variable name rather than with the type (e.g. `char *name`, not\n`char* name`)\n* Avoid long lines, use intermediate variables with meaningful names.\n\n#","ref":"contributing.html#other-coding-conventions","title":"Other Coding Conventions - Contributing","type":"extras"},{"doc":"Just use Elixir formatter enforced style.","ref":"contributing.html#elixir-code","title":"Elixir Code - Contributing","type":"extras"},{"doc":"# Contributor Covenant Code of Conduct","ref":"code_of_conduct.html","title":"Contributor Covenant Code of Conduct","type":"extras"},{"doc":"We as members, contributors, and leaders pledge to make participation in our\ncommunity a harassment-free experience for everyone, regardless of age, body\nsize, visible or invisible disability, ethnicity, sex characteristics, gender\nidentity and expression, level of experience, education, socio-economic status,\nnationality, personal appearance, race, religion, or sexual identity\nand orientation.\n\nWe pledge to act and interact in ways that contribute to an open, welcoming,\ndiverse, inclusive, and healthy community.","ref":"code_of_conduct.html#our-pledge","title":"Our Pledge - Contributor Covenant Code of Conduct","type":"extras"},{"doc":"Examples of behavior that contributes to a positive environment for our\ncommunity include:\n\n* Demonstrating empathy and kindness toward other people\n* Being respectful of differing opinions, viewpoints, and experiences\n* Giving and gracefully accepting constructive feedback\n* Accepting responsibility and apologizing to those affected by our mistakes,\n  and learning from the experience\n* Focusing on what is best not just for us as individuals, but for the\n  overall community\n\nExamples of unacceptable behavior include:\n\n* The use of sexualized language or imagery, and sexual attention or\n  advances of any kind\n* Trolling, insulting or derogatory comments, and personal or political attacks\n* Public or private harassment\n* Publishing others' private information, such as a physical or email\n  address, without their explicit permission\n* Other conduct which could reasonably be considered inappropriate in a\n  professional setting","ref":"code_of_conduct.html#our-standards","title":"Our Standards - Contributor Covenant Code of Conduct","type":"extras"},{"doc":"Community leaders are responsible for clarifying and enforcing our standards of\nacceptable behavior and will take appropriate and fair corrective action in\nresponse to any behavior that they deem inappropriate, threatening, offensive,\nor harmful.\n\nCommunity leaders have the right and responsibility to remove, edit, or reject\ncomments, commits, code, wiki edits, issues, and other contributions that are\nnot aligned to this Code of Conduct, and will communicate reasons for moderation\ndecisions when appropriate.","ref":"code_of_conduct.html#enforcement-responsibilities","title":"Enforcement Responsibilities - Contributor Covenant Code of Conduct","type":"extras"},{"doc":"This Code of Conduct applies within all community spaces, and also applies when\nan individual is officially representing the community in public spaces.\nExamples of representing our community include using an official e-mail address,\nposting via an official social media account, or acting as an appointed\nrepresentative at an online or offline event.","ref":"code_of_conduct.html#scope","title":"Scope - Contributor Covenant Code of Conduct","type":"extras"},{"doc":"Instances of abusive, harassing, or otherwise unacceptable behavior may be\nreported to the community leaders responsible for enforcement at\ndavide AT uninstall.it.\nAll complaints will be reviewed and investigated promptly and fairly.\n\nAll community leaders are obligated to respect the privacy and security of the\nreporter of any incident.","ref":"code_of_conduct.html#enforcement","title":"Enforcement - Contributor Covenant Code of Conduct","type":"extras"},{"doc":"Community leaders will follow these Community Impact Guidelines in determining\nthe consequences for any action they deem in violation of this Code of Conduct:\n\n#","ref":"code_of_conduct.html#enforcement-guidelines","title":"Enforcement Guidelines - Contributor Covenant Code of Conduct","type":"extras"},{"doc":"**Community Impact**: Use of inappropriate language or other behavior deemed\nunprofessional or unwelcome in the community.\n\n**Consequence**: A private, written warning from community leaders, providing\nclarity around the nature of the violation and an explanation of why the\nbehavior was inappropriate. A public apology may be requested.\n\n#","ref":"code_of_conduct.html#1-correction","title":"1. Correction - Contributor Covenant Code of Conduct","type":"extras"},{"doc":"**Community Impact**: A violation through a single incident or series\nof actions.\n\n**Consequence**: A warning with consequences for continued behavior. No\ninteraction with the people involved, including unsolicited interaction with\nthose enforcing the Code of Conduct, for a specified period of time. This\nincludes avoiding interactions in community spaces as well as external channels\nlike social media. Violating these terms may lead to a temporary or\npermanent ban.\n\n#","ref":"code_of_conduct.html#2-warning","title":"2. Warning - Contributor Covenant Code of Conduct","type":"extras"},{"doc":"**Community Impact**: A serious violation of community standards, including\nsustained inappropriate behavior.\n\n**Consequence**: A temporary ban from any sort of interaction or public\ncommunication with the community for a specified period of time. No public or\nprivate interaction with the people involved, including unsolicited interaction\nwith those enforcing the Code of Conduct, is allowed during this period.\nViolating these terms may lead to a permanent ban.\n\n#","ref":"code_of_conduct.html#3-temporary-ban","title":"3. Temporary Ban - Contributor Covenant Code of Conduct","type":"extras"},{"doc":"**Community Impact**: Demonstrating a pattern of violation of community\nstandards, including sustained inappropriate behavior,  harassment of an\nindividual, or aggression toward or disparagement of classes of individuals.\n\n**Consequence**: A permanent ban from any sort of public interaction within\nthe community.","ref":"code_of_conduct.html#4-permanent-ban","title":"4. Permanent Ban - Contributor Covenant Code of Conduct","type":"extras"},{"doc":"This Code of Conduct is adapted from the [Contributor Covenant][homepage],\nversion 2.0, available at\nhttps://www.contributor-covenant.org/version/2/0/code_of_conduct.html.\n\nCommunity Impact Guidelines were inspired by [Mozilla's code of conduct\nenforcement ladder](https://github.com/mozilla/diversity).\n\n[homepage]: https://www.contributor-covenant.org\n\nFor answers to common questions about this code of conduct, see the FAQ at\nhttps://www.contributor-covenant.org/faq. Translations are available at\nhttps://www.contributor-covenant.org/translations.","ref":"code_of_conduct.html#attribution","title":"Attribution - Contributor Covenant Code of Conduct","type":"extras"}]}